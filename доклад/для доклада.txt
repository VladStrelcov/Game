19. Уваров Никита (9В). Разработка библиотеки анализа исходного кода программ на языке С.

Целью работы явилось создание библиотеки для лексического, синтаксического и семантического анализа программ на языке С. 
На её основе можно реализовать инструменты, которые используют препроцессированный текст, поток лексем, печатают или оптимизируют синтаксическое дерево. 
Модули системы взаимодействуют через интерфейсы, что позволяет пользователю самому реализовать некоторую функциональность, например, 
класс оптимизации на основе классов синтаксического 
и семантического анализа.


Рассмотрим процесс построения синтаксического дерева. 
На вход лексическому анализатору подается входной поток (который может быть не только файлом, но и объектом в памяти). 
Он разбивает его на лексемы – неделимые единицы языка. Любое имя, строка, число, знак являются лексемами. 
Напротив, отдельные цифры числа, символы строки сами по себе лексемами не являются и в задачу лексического анализа как раз входит их объединение.


Полученный поток лексем может быть передан препроцессору, который выполняет анализ директив и обработку инструкций define. 
Данная реализация препроцессора может быть использована для его изучения, так как поддерживает все функции, 
определённые в действующем стандарте языка С (С99, ISO/IEC 9899:1999 E).


Наконец, поток лексем доходит до синтаксического анализатора (класс SyntaxTreeBuilder), который строит синтаксическое дерево программы методом рекурсивного пуска. 
Данная часть библиотеки взаимодействует с генератором типов посредством интерфейса, вызывая определённые функции для каждой вершины. 
Алгоритм построения дерева будет рассмотрен в докладе отдельно.


На выходе мы получаем синтаксическое дерево, которое можно распечатать или сохранить для дальнейшей визуализации. 
Несмотря на большое количество модулей, которые можно использовать по отдельности, препроцессирование, 
построение дерева и генерация типов вершин выполняются за один проход.


Библиотека разделена на файлы заголовков и реализации, допускает использование через DLL. 
Для обработки ошибок на уровне программиста используются исключения, а на уровне пользователя предусмотрено ведение лога компиляции.


Некоторой внутренней мотивацией автора, в числе прочего, была проблема изучения частей языка С, которые описаны только в спецификациях стандарта, 
весьма трудного для изучения документа.
Примером такой части может служить система типов со всеми ее деталями и особенностями. Например, все программисты умеют объявлять указатели на функции,
 но не все четко знают, как объявить, 
например, массив указателей на них, или почему нельзя заключить возвращаемый тип в скобки: (void) func(). 
Другая «загадочная» часть языка С – препроцессор – зачастую мало требуется в программах на С++ но тем не менее полезно знать, как он работает,
 и какие уникальные возможности предоставляет.




11. Пимкин Артем (8В). Этапы создания двумерной игры на С++.


Целью доклада является рассказ об этапах разработки компьютерной игры, в частности какие этапы необходимо выделить при разработке двумерной игры, 
даже если до этого у разработчика не было опыта написания компьютерных игр. 
В качестве примера процесса разработки игры будет приведена написанная автором игра PunkMania.


В докладе из процесса разработки выделены три стадии, которые будут разделены на различные этапы.


В первой стадии содержится два этапа – это этап концепта (задумки), который необходим, чтобы понять, о чем или зачем планируется создать игру. 
Второй этап – это этап прототипа, который необходимо выделить, чтобы понимать, откуда «начинать писать» свою игру, что является ее «базой», 
необходимым функциональным минимумом.

Во второй стадии важен этап разработки различных надстроек над начальным прототипом, в конце которого необходимо получить законченный игровой процесс.
 В конце этого этапа необходимо провести так называемый альфа-тест о смысле, подробнее о котором будет рассказано в докладе.


Есть еще третья стадия – интерфейсная. Это стадия реализации и «доводки» интерфейса игры и ее графики. 
В конце этой стадии также необходимо провести тест, о чем также будет рассказано в ходе доклада.




5. Кузнецов Артем (7В). Разработка анимационной компьютерной игры.


Целью работы являлось создание анимационной игры Bomberman.

При написании использовалась среда Dev-Cpp и компилятор GCC.

Содержание игры состоит в следующем: два человечка (Bomberman`ы) бегают по полю и кидаются бомбами. 
Но у них на пути есть препятствия (подрываемые и неподрываемые стены). Также на карте лежат бонусы (ускорение, количество бомб, длина взрыва).
Цель игры – человечки должны друг друга подорвать.

Первая часть работы состоялась в том чтобы написать первый прототип игры Bomberman.

Вторая часть работы состояла в том, чтобы написать карту и стены, редактор карт и генератор карт. 
В редакторе карты можно добавлять стены и бонусы, удалять их и менять местоположение bomberman`ов. 
При редактирования карты можно менять местоположение bomberman`ов. 
Затем можно сохранить карту с расширением .bmm (BomberMan Map).
Задачей третьей части работы было осуществить игру по сети с помощью WinSock2.




16. Лебедев Сергей (7А). Создание компьютер­ной игры, развивающей меткость, на языке про­грам­мирования C++.

Целью работы было создание графической компью­терной игры TIR_UNLIMITED на языке программиро­ва­ния C++ с помощью компилятора Dev-C++. 
Цель игры – за минимальное количество выстрелов попасть в различ­ные мишени. Игра развивает меткость. В игре использо­вана графика в виде файлов BMP, 
что придает игре кра­соч­ность. 
Разработка этой игры помогла лучше по­нять основы программирования под Windows и нау­читься пользоваться компилятором Dev-C++.

В дальнейшем планируется командная разра­ботка игры в среде Visual Studio 2005, которая бу­дет являться аналогом знаменитой игры «Life Forse» на Dendy.



25. Шимко Олег (10 класс, школа №179 МИОО). Раз­ра­ботка компьютерной игры «Halloween»

Цель работы – разработка компьютерной игры на тему Halloween и её игрового процесса, с под­держкой скинов и различных графических биб­лиотек.

В игре реализовано большое количество разно­образ­ных объектов, каждый из которых является анимацией (набор картинок в формате BMP), бонусы, 
помогаю­щие пользователю в про­хождении игры, 
большое ко­личество уровней, звук (в формате WAV) при исполь­зовании бо­нуса или прохождении уровня, удобный пользователь­ский интерфейс.


